{"version":3,"sources":["constants/common.js","components/CustomForm/formValidation.js","components/common/SelectInput/index.jsx","components/common/FormInput/index.jsx","components/CustomForm/index.jsx","components/App.js","serviceWorker.js","index.js"],"names":["ageGroupList","value","label","stateList","registerSchema","Yup","shape","name","matches","required","min","age","email","mode","SelectInput","this","props","onChange","isDisabled","error","options","isMulti","isSearchable","placeholder","className","defaultValue","labelText","classNameOut","cx","classNamePrefix","Component","FormInput","type","id","conditionalClass","disabled","component","formIinitialValues","state","district","pincode","CustomForm","useState","initialValues","setInitialValues","districtList","setDistrictList","handleSelectChange","setFieldValue","key","selectedOption","getDistrictList","stateId","a","fetch","method","headers","Accept","body","JSON","stringify","state_id","rawResponse","json","content","status","districts","data","map","d","district_id","district_name","window","alert","useEffect","validationSchema","onSubmit","values","actions","payload","parseInt","dist_id","response","console","log","handleSubmit","htmlFor","errors","role","aria-labelledby","App","Boolean","location","hostname","match","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNAGaA,EAAe,CAC1B,CAAEC,MAAO,GAAIC,MAAO,OACpB,CAAED,MAAO,GAAIC,MAAO,QAGTC,EAAY,CACvB,CACEF,MAAO,EACPC,MAAO,+BAET,CACED,MAAO,EACPC,MAAO,kBAET,CACED,MAAO,EACPC,MAAO,qBAET,CACED,MAAO,EACPC,MAAO,SAET,CACED,MAAO,EACPC,MAAO,SAET,CACED,MAAO,EACPC,MAAO,cAET,CACED,MAAO,EACPC,MAAO,gBAET,CACED,MAAO,EACPC,MAAO,0BAET,CACED,MAAO,GACPC,MAAO,iBAET,CACED,MAAO,EACPC,MAAO,SAET,CACED,MAAO,GACPC,MAAO,OAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,oBAET,CACED,MAAO,GACPC,MAAO,qBAET,CACED,MAAO,GACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,UAET,CACED,MAAO,GACPC,MAAO,UAET,CACED,MAAO,GACPC,MAAO,eAET,CACED,MAAO,GACPC,MAAO,kBAET,CACED,MAAO,GACPC,MAAO,eAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,YAET,CACED,MAAO,GACPC,MAAO,UAET,CACED,MAAO,GACPC,MAAO,cAET,CACED,MAAO,GACPC,MAAO,UAET,CACED,MAAO,GACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,UAET,CACED,MAAO,GACPC,MAAO,cAET,CACED,MAAO,GACPC,MAAO,aAET,CACED,MAAO,GACPC,MAAO,WAET,CACED,MAAO,GACPC,MAAO,iBAET,CACED,MAAO,GACPC,MAAO,eAET,CACED,MAAO,GACPC,MAAO,gBCvJEE,EAAiBC,MAAaC,MAAM,CAC/CC,KAAMF,MACHG,QDL4B,eCKD,6CAC3BC,SAAS,6BACTC,IAAI,EAAG,qDACVC,IAAKN,MAAaI,SAAS,i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","file":"static/js/main.effaeb19.chunk.js","sourcesContent":["export const numeric = /^[0-9]*$/;\nexport const lettersWithSpaces = /^[a-zA-Z ]*$/;\n\nexport const ageGroupList = [\n  { value: 18, label: \"18+\" },\n  { value: 45, label: \"45+\" }\n];\n\nexport const stateList = [\n  {\n    value: 1,\n    label: \"Andaman and Nicobar Islands\"\n  },\n  {\n    value: 2,\n    label: \"Andhra Pradesh\"\n  },\n  {\n    value: 3,\n    label: \"Arunachal Pradesh\"\n  },\n  {\n    value: 4,\n    label: \"Assam\"\n  },\n  {\n    value: 5,\n    label: \"Bihar\"\n  },\n  {\n    value: 6,\n    label: \"Chandigarh\"\n  },\n  {\n    value: 7,\n    label: \"Chhattisgarh\"\n  },\n  {\n    value: 8,\n    label: \"Dadra and Nagar Haveli\"\n  },\n  {\n    value: 37,\n    label: \"Daman and Diu\"\n  },\n  {\n    value: 9,\n    label: \"Delhi\"\n  },\n  {\n    value: 10,\n    label: \"Goa\"\n  },\n  {\n    value: 11,\n    label: \"Gujarat\"\n  },\n  {\n    value: 12,\n    label: \"Haryana\"\n  },\n  {\n    value: 13,\n    label: \"Himachal Pradesh\"\n  },\n  {\n    value: 14,\n    label: \"Jammu and Kashmir\"\n  },\n  {\n    value: 15,\n    label: \"Jharkhand\"\n  },\n  {\n    value: 16,\n    label: \"Karnataka\"\n  },\n  {\n    value: 17,\n    label: \"Kerala\"\n  },\n  {\n    value: 18,\n    label: \"Ladakh\"\n  },\n  {\n    value: 19,\n    label: \"Lakshadweep\"\n  },\n  {\n    value: 20,\n    label: \"Madhya Pradesh\"\n  },\n  {\n    value: 21,\n    label: \"Maharashtra\"\n  },\n  {\n    value: 22,\n    label: \"Manipur\"\n  },\n  {\n    value: 23,\n    label: \"Meghalaya\"\n  },\n  {\n    value: 24,\n    label: \"Mizoram\"\n  },\n  {\n    value: 25,\n    label: \"Nagaland\"\n  },\n  {\n    value: 26,\n    label: \"Odisha\"\n  },\n  {\n    value: 27,\n    label: \"Puducherry\"\n  },\n  {\n    value: 28,\n    label: \"Punjab\"\n  },\n  {\n    value: 29,\n    label: \"Rajasthan\"\n  },\n  {\n    value: 30,\n    label: \"Sikkim\"\n  },\n  {\n    value: 31,\n    label: \"Tamil Nadu\"\n  },\n  {\n    value: 32,\n    label: \"Telangana\"\n  },\n  {\n    value: 33,\n    label: \"Tripura\"\n  },\n  {\n    value: 34,\n    label: \"Uttar Pradesh\"\n  },\n  {\n    value: 35,\n    label: \"Uttarakhand\"\n  },\n  {\n    value: 36,\n    label: \"West Bengal\"\n  }\n];\n\n// {\n//   \"email\": \"foo@ymail.com\",\n//   \"pincode\": \"560068\",\n//   \"age\": 63,\n//   \"mode\": 2,\n//   \"dist_id\": \"294\"\n// }\n\n// 35.245.41.254:8080/districts\n// {\n//     \"value\": \"30\"\n// }\n","\nimport * as Yup from \"yup\";\nimport { lettersWithSpaces, numeric } from \"../../constants/common\";\n\nexport const registerSchema = Yup.object().shape({\n  name: Yup.string()\n    .matches(lettersWithSpaces, \"Name should not contain special character\")\n    .required(\"Please enter a valid Name\")\n    .min(3, \"First name is too short (minimum is 3 characters)\"),\n  age: Yup.object().required(\"Please select valid age group\"),\n  email: Yup.string()\n    .email(\"Please enter a valid email address\")\n    .required(\"Email is required\"),\n  mode: Yup.number().required(\"Mode is mandatory\"),\n  // pincode:Yup.string().when('mode', {\n  //   is: '1',\n  //   then: Yup.string()\n  //   .required(\"Pincode is required\")\n  //   .matches(numeric, \"Pincode should be Numeric\")\n  //   .max(6, \"Pincode length should be 6\")\n  //   .min(6, \"Pincode length should be 6\"),\n  //   // otherwise: Yup.string().notRequired(),\n  // }),\n  // pincode: Yup.string()\n  // .matches(numeric, \"Pincode should be Numeric\")\n  // .required(\"Pincode is required\")\n  // .max(6, \"Pincode length should be 6\")\n  //   .min(6, \"Pincode length should be 6\"),\n  // state:Yup.object().when('mode', {\n  //   is: '2',\n  //   then: Yup.object().required('State is mandatory'),\n  //   otherwise: Yup.object().notRequired(),\n  // }), \n  // district:Yup.object().when('mode', {\n  //   is: '2',\n  //   then: Yup.object().required('District is mandatory'),\n  //   otherwise: Yup.object().notRequired(),\n  // })\n});\n","import React, { Component } from \"react\";\nimport Select from \"react-select\";\nimport cx from \"classnames\";\n\nclass SelectInput extends Component {\n  render() {\n    const {\n      value,\n      onChange,\n      isDisabled,\n      error,\n      options,\n      isMulti,\n      isSearchable,\n      placeholder,\n      className,\n      defaultValue,\n      labelText,\n      required,\n      classNameOut\n    } = this.props;\n    return (\n      <div className={cx(\"form-group\", classNameOut)}>\n        {labelText ? (\n          <label>\n            {labelText}\n            {required ? <sup>*</sup> : null}\n          </label>\n        ) : null}\n        <Select\n          classNamePrefix=\"select-dropdown\"\n          className={className}\n          onChange={onChange}\n          value={value}\n          isDisabled={isDisabled}\n          placeholder={placeholder}\n          options={options}\n          isMulti={isMulti}\n          isSearchable={isSearchable}\n          defaultValue={defaultValue}\n        />\n        {error ? <span className=\"error-message\">{error}</span> : null}\n      </div>\n    );\n  }\n}\n\nexport default SelectInput;\n","import React, { Component } from 'react';\nimport {  Field, ErrorMessage } from 'formik';\nimport cx from 'classnames';\n\nexport default class FormInput extends Component {\n    render() {\n        const { name, type, placeholder, id, conditionalClass, labelText, required, className, disabled } = this.props\n        return (\n            <div className={cx(\"form-group\", className)}>\n                {\n                    labelText ? <label>{labelText} {required ? <sup>*</sup> : null}</label> : null\n                }\n                <Field\n                    name={name}\n                    type={type}\n                    id={id}\n                    placeholder={placeholder}\n                    className={cx(\"form-control\", conditionalClass)}\n                    disabled={disabled}\n                />\n                <ErrorMessage\n                    name={name}\n                    component=\"span\"\n                    className=\"error-message\"\n                />\n            </div>\n        )\n    }\n}","import React, { useState, useEffect } from \"react\";\nimport { Formik, Field, ErrorMessage } from \"formik\";\nimport { registerSchema } from \"./formValidation\";\nimport SelectInput from \"../common/SelectInput\";\nimport FormInput from \"../common/FormInput\";\nimport { ageGroupList, stateList } from \"../../constants/common\";\n\nconst formIinitialValues = {\n  name: \"\",\n  age: \"\",\n  email: \"\",\n  mode: \"\",\n  state: \"\",\n  district: \"\",\n  pincode: \"\"\n};\n\nconst CustomForm = () => {\n  const [initialValues, setInitialValues] = useState({...formIinitialValues});\n  const [districtList, setDistrictList] = useState([]);\n\n  const handleSelectChange = (setFieldValue, key, selectedOption, ) => {\n    setInitialValues({\n      ...initialValues,\n      [key]: selectedOption\n    });\n    setFieldValue(key, selectedOption);\n  };\n\n  const getDistrictList = async (stateId) => {\n    if(stateId){\n      const rawResponse = await fetch(\"http://35.245.41.254:8080/districts\", {\n          method: \"POST\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({    state_id: stateId})\n        }\n      );\n      const content = await rawResponse.json();\n      if(content?.status === 200){\n        let districts = content?.data?.districts;\n        districts = districts.map(d => {\n          let a = { value: d.district_id, label: d.district_name}\n          return a;\n        });\n        setDistrictList(districts)\n      }\n      else{\n        window.alert('Something Went Wrong!')\n      }\n    }\n  };\n\n  useEffect(() => {\n    getDistrictList(initialValues?.state?.value);\n  }, [initialValues.state]);\n\n  return (\n    <div className=\"form-wrapper\">\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={async (values, actions) => {\n          const payload = {};\n          payload.name = values.name;\n          payload.email = values.email;\n          payload.age = values.age?.value;\n          payload.mode = parseInt(values.mode);\n          if(payload.mode===1){\n            payload.pincode = values.pincode;\n          } else if(payload.mode === 2){\n            payload.dist_id = values.district?.value;\n          }\n\n          const rawResponse = await fetch(\"http://35.245.41.254:8080/userinfo\", {\n            method: \"POST\",\n            headers: {\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({...payload})\n          });\n          const response = await rawResponse.json();\n          console.log(response);\n          if(response?.status === 200){\n            window.alert(response.data);\n          }\n          else{\n            window.alert('Something Went Wrong!')\n          }\n        }}\n      >\n        {(props) => (\n          <form onSubmit={props.handleSubmit}>\n\n            <label htmlFor=\"name\">Name</label>\n            <FormInput id=\"name\" name=\"name\" placeholder=\"Enter your name\" />\n\n            <label htmlFor=\"age\">Age</label>\n            <SelectInput\n              placeholder=\"Select Age Group\"\n              value={initialValues?.age}\n              onChange={(selectedOption) =>{\n                handleSelectChange(props.setFieldValue, \"age\", selectedOption);\n              }}\n              options={ageGroupList}\n              error={props.errors.age}\n            />\n\n            <label htmlFor=\"email\">Email</label>\n            <FormInput\n              id=\"email\"\n              name=\"email\"\n              placeholder=\"Enter your Email\"\n              type=\"email\"\n            />\n\n            <div id=\"my-radio-group\">Mode</div>\n            <div role=\"group\" aria-labelledby=\"mode\">\n              <label>\n                <Field type=\"radio\" name=\"mode\" value=\"1\" />\n                Pincode\n              </label>{' '}\n              <label>\n                <Field type=\"radio\" name=\"mode\" value=\"2\" />\n                District\n              </label>\n            </div>\n            <ErrorMessage\n                    name=\"mode\"\n                    component=\"div\"\n                    className=\"error-message\"\n                />\n\n            { props.values.mode === \"1\" && \n              <>\n                <label htmlFor=\"age\">Pincode</label>\n                <FormInput\n                  id=\"pincode\"\n                  name=\"pincode\"\n                  placeholder=\"Enter your pincode\"\n                  type=\"pincode\"\n                />\n              </> \n            }\n            { props.values.mode === \"2\" &&\n              <>\n                <label htmlFor=\"state\">State</label>\n                <SelectInput\n                  placeholder=\"Select State\"\n                  value={initialValues?.state}\n                  onChange={(selectedOption) => {\n                    handleSelectChange(props.setFieldValue, \"state\", selectedOption);\n                  }}\n                  options={stateList}\n                  error={props.errors.state}\n                />\n                <label htmlFor=\"District\">District</label>\n                <SelectInput\n                  placeholder=\"Select District\"\n                  value={initialValues?.district}\n                  onChange={(selectedOption) =>\n                    handleSelectChange(props.setFieldValue, \"district\", selectedOption)\n                  }\n                  options={districtList}\n                  error={props.errors.district}\n                />\n              </> \n            }\n            <br/>\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n          </form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n\nexport default CustomForm;\n","import React from \"react\";\nimport \"../../src/styles.scss\";\nimport CustomForm from \"./CustomForm\";\n\nconst  App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"heading\">\n        <h1>Vaccine Availability</h1>\n        <h5>\n          Submit following details, and we'll notify you, as soon as vaccine\n          is available in your area for next 7 days.\n        </h5>\n      </div>\n      <CustomForm />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'))\n    \nserviceWorker.unregister();\n"],"sourceRoot":""}